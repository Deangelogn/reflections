1. Como a visualização de um diff entre versões de um arquivo ajuda você a ver o bug que foi introduzido?

O visualização do diff mostra as mudanças entre o arquivo antigo (que estava funcionando) e o arquivo novo (que possui as mudanças). Observando essas mudanças, é possível encontrar o bug inserido no arquivo novo.  

2. Como ter fácil acesso a todo o histórico de um arquivo pode torná-lo um programador mais eficiente no longo prazo?

Por meio do acesso ao histórico de um arquivo é possível recuperar trechos de códigos, que foram removidos. Além disso, identificar bugs que não existiam nas versões antecessoras.

3. Na sua opinião, quais são os prós e contras de escolher manualmente quando criar um commit, como ocorre no Git, v. o salvamento automático de versões, como no Google Docs?

Git (versões de controle manuais)
- pros
* Geração de commits com conteúdo significativo
* evita commits desnecessários.

- contras
* Versões grandes
* Dificulta a compração dos commits, caso tenha um espaço de tempo grande entre elas.



Google Docs (versões de controle automáticas)
-Pros
* Garante o commit, caso o usuário esuqeça
* Evita alterações grandes entre as versões.

-contras
* Commits desnecessários
* Dificulta a seleção da commits para comparação

4. Por que você acha que alguns sistemas de controle de versão, como o Git, permitem salvar vários arquivos em um commit, enquanto outros, como o Google Docs, tratam cada arquivo separadamente?

No Caso do Git, os repositórios consistem de um conjunto de arquivos que são interdependentes, diferentimente dos arquivos do Google Docs que trabalha com arquivos independentes, como arquivos de trextos, planihas, apresentações, etc.

5. Como usar os comandos git log e git diff para visualizar o histórico dos arquivos?

Primeiramente, deve-se utilizar o git log para ver os IDs de dois commits, em seguida utiliza-se o comando "git diff" para comparar estes dois commits.  

6. De que modo o controle de versão pode dar a você mais segurança para fazer alterações que podem danificar algo?

A possibilidade de recuperar antigos repositorios permite a programação segura do sistema, pois quando um erro ou bug for inserido na nova versaõ do repostitório, bas utilizar os comando git log e para as antigas versões do repositório, até encontrar o coomit onde o bug foi introduzido.

7. Agora que você já configurou a sua área de trabalho, você quer usar o Git para quê?

Gostaria de usar o git para salvar os arquivos dos projetos que tenho tentado desenvolver.